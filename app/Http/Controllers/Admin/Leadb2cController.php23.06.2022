<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\leadmasters;
use App\Models\comment;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Date;
use App\Models\package;

class Leadb2cController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }
    public function index(Request $request)
    {
        $leads = leadmasters::select('id', 'enqueryID', 'jurneyDate', 'customerName', 'email', 'contactNumber', 'leadSource', 'leadType', 'created_at', 'createdBy', 'status', 'history', 'empfeedback', 'leadRank', 'assignTo')->orderBy('id', 'desc')->whereBetween('created_at', array(date('Y/m/d'), date('Y/m/d')))->get();
       
        return view('admin/leadb2c')->with('data', $leads);
    }
    public function searchLead(Request $request)
    {

        $query = '';
        if ($request->status != '' && $request->status != null) {
            $query .= "`status`='" . $request->status . "'";
        }
        if ($request->start_date != '' && $request->start_date != null) {
            $query .= $query != '' ? " AND DATE(`created_at`) >= '" . $request->start_date . "'" : "DATE(`created_at`) >= '" . $request->start_date . "'";
        }
        if ($request->end_date != '' && $request->end_date != null) {
            $query .= $query != '' ? " AND DATE(`created_at`) <= '" . $request->end_date . "'" : "DATE(`created_at`) <= '" . $request->end_date . "'";
        }
        if ($query != '') {
            $leads = leadmasters::select('id', 'enqueryID', 'jurneyDate', 'customerName', 'email', 'contactNumber', 'leadSource', 'leadType', 'created_at', 'createdBy', 'status', 'history', 'empfeedback', 'leadRank', 'assignTo')->whereRaw($query)->orderBy('id', 'desc')->get();
        } else {
            $leads = leadmasters::select('id', 'enqueryID', 'jurneyDate', 'customerName', 'email', 'contactNumber', 'leadSource', 'leadType', 'created_at', 'createdBy', 'status', 'history', 'empfeedback', 'leadRank', 'assignTo')->orderBy('id', 'desc')->get();
        }

        // dd($leads->customerName);
        return view('admin/ajaxLeadB2cSearch')->with('data', $leads);
    }
    public function leadsDetailsEdit($id)
    {
        
        $key = $id;
        
        $leads = leadmasters::where('id', $id)->get();
        $Package = Package::whereNotNull('title')->get();
        
        return view('admin/edit-lead')->with('leads',$leads)->with('Package',$Package);
    }
    public function leadsDetailsUpdate(Request $request)
    {
        $key = $request->lead_id;
        leadmasters::where("id", $key)->update([
        'leadType' => $request->leadType,
        'customerName' => $request->customerName,
        'email' => $request->email,
        'contactNumber' => $request->contactNumber,
        'address' => $request->address,
        'noOfAdult' => $request->noOfAdult,
        'childWithBed' => $request->childWithBed,
        'childWithNoBed' => $request->childWithNoBed,
        'totalChild' => $request->totalChild,
        'noOfInfant' => $request->noOfInfant,
        'totalPAX' => $request->totalPAX,
        'destination' => $request->destination,
        'jurneyDate' => Carbon::createFromFormat('d/m/Y', $request->arrivalDate)->format('Y-m-d'),
        'modeOfArrival' => $request->modeOfArrival,
        'modeOfTravel' => $request->modeOfTravel,
        'categoryOfPkg' => $request->categoryOfPkg,
        'hotelCategory' => $request->hotelCategory,
        'foodPlan' => $request->foodPlan,
        'totalTourBudget' => $request->totalTourBudget,
        'durationOfStay' => $request->durationOfStay,
        'additionalFacility' => $request->additionalFacility,
        'remark' => $request->remark,
        'TAT' => $request->TAT . " " . $request->tatTime,
        ]);
        return 1;
    }
    public function updateLeadb2c(Request $request)
    {
        if ($request->type == 'status') {
            leadmasters::where('id', $request->id)->update([
                'status' => $request->value
            ]);
            return response()->json([
                'status' => true,
                'msg' => "Status update Success full"
            ]);
        } elseif ($request->type == 'assignTo') {
            leadmasters::where('id', $request->id)->update([
                'assignTo' => $request->value
            ]);
            return response()->json([
                'status' => true,
                'msg' => "Assign to update Success full"
            ]);
        } elseif ($request->type == 'rank') {
            leadmasters::where('id', $request->id)->update([
                'leadRank' => $request->value
            ]);
            return response()->json([
                'status' => true,
                'msg' => "Rank update Success full"
            ]);
        } elseif ($request->type == 'jurneyDate') {
            leadmasters::where('id', $request->id)->update([
                'jurneyDate' => $request->value
            ]);
            return response()->json([
                'status' => true,
                'msg' => "Jurney Date update Success full"
            ]);
        } elseif ($request->type == 'contactNumber') {
            leadmasters::where('id', $request->id)->update([
                'contactNumber' => $request->value
            ]);
            return response()->json([
                'status' => true,
                'msg' => "Contact Number update Success full"
            ]);
        } else {
            return response()->json([
                'status' => false,
                'msg' => "Update failed"
            ]);
        }
    }
    public function saveComment(Request $request)
    {
        $comment = new comment;
        $comment->enqueryId = $request->enqueryId;
        $comment->remark = $request->comment;
        $comment->save();
        return back()->with('data', $comment);
    }
    public function fatchComment(Request $request)
    {
        if ($request->ajax()) {
            $data = comment::where('enqueryId', $request->enqueryId)->get();
            $output = '';
            if (count($data) > 0) {
                foreach ($data as $row) {
                    $output .= '<tr>
                        <td>' . $row->id . '</td>
                        <td>' . $row->enqueryId . '</td>
                        <td>' . $row->date . '</td>
                        <td>' . $row->remark . '</td>
                        <td>' . $row->givenBy . '</td>
                        <td>' . $row->role . '</td>
                        <td>' . $row->buzz . '</td>
                    </tr>';
                }
            } else {
                $output .= '<tr><td colspan="7">No Data Found</td></tr>';
            }
            return response()->json($output);
        }
    }
}